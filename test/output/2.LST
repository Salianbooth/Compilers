Microsoft (R) Macro Assembler Version 6.11		    05/25/25 22:11:36
2.asm							     Page 1 - 1


				; Program: Sum of odd numbers
				; Description: Calculate sum of odd numbers from 1 to N

				ASSUME CS:CODE, DS:DATA, SS:STACK, ES:EXTENDED

 0000				EXTENDED SEGMENT
 0000  0400 [			    DB 1024 DUP(0)
        00
       ]
 0400				EXTENDED ENDS

 0000				STACK SEGMENT
 0000  0400 [			    DB 1024 DUP(0)
        00
       ]
 0400				STACK ENDS

 0000				DATA SEGMENT
 0000  0100 [			    _buff_p DB 256 DUP (24h)
        24
       ]
 0100  0100 [			    _buff_s DB 256 DUP (0)
        00
       ]
 0200 0A 4F 75 74 70 75		    _msg_p DB 0ah,'Output:',0
       74 3A 00
 0209 0A 49 6E 70 75 74		    _msg_s DB 0ah,'Input:',0
       3A 00
 0211 0D 0A 24			    next_row DB 0dh,0ah,'$'
 0214 69 6E 70 75 74 20		    error DB 'input error, please re-enter: ','$'
       65 72 72 6F 72 2C
       20 70 6C 65 61 73
       65 20 72 65 2D 65
       6E 74 65 72 3A 20
       24
				    ; Global variables
 0233 0000			    sum     DW 0
 0235 0000			    N       DW 0
 0237 0000			    i       DW 0
 0239 0000			    temp_sum DW 0   ; Temporary variable to store sum value
 023B 0000			    T0      DW 0
 023D 0000			    T1      DW 0
 023F 0000			    T2      DW 0
 0241 0000			    T3      DW 0
 0243 0000			    T4      DW 0
 0245 0000			    T5      DW 0
 0247 0000			    T6      DW 0

 0249				DATA ENDS

 0000				CODE SEGMENT
 0000				START:
				    ; Initialize segments
 0000  B8 ---- R		    MOV AX, DATA
 0003  8E D8			    MOV DS, AX
 0005  B8 ---- R		    MOV AX, STACK
 0008  8E D0			    MOV SS, AX
 000A  B8 ---- R		    MOV AX, EXTENDED
 000D  8E C0			    MOV ES, AX
 000F  BC 0400			    MOV SP, 1024
 0012  8B EC			    MOV BP, SP

				    ; Program start
 0014  C7 06 0233 R 0000	    MOV sum, 0    ; Initialize sum to 0
				    
				    ; Read input N
 001A  E8 0061			    CALL read
 001D  A3 0235 R		    MOV N, AX     ; N = read()
				    
				    ; Initialize loop counter i
 0020  C7 06 0237 R 0001	    MOV i, 1      ; i = 1
				    
 0026				FOR_LOOP:
				    ; Check loop condition i <= N
 0026  A1 0237 R		    MOV AX, i
 0029  3B 06 0235 R		    CMP AX, N
 002D  7F 1C			    JG QUIT       ; If i>N then exit loop
				    
				    ; Calculate i%2
 002F  A1 0237 R		    MOV AX, i
 0032  B3 02			    MOV BL, 2
 0034  F6 F3			    DIV BL        ; Result in AL, remainder in AH
				    
				    ; Check if i is odd
 0036  80 FC 01			    CMP AH, 1
 0039  75 0A			    JNE NEXT      ; If not odd, skip addition
				    
				    ; Add odd number
 003B  A1 0233 R		    MOV AX, sum
 003E  03 06 0237 R		    ADD AX, i
 0042  A3 0233 R		    MOV sum, AX
				    
 0045				NEXT:
				    ; Update loop counter
 0045  FF 06 0237 R		    INC i         ; i++
 0049  EB DB			    JMP FOR_LOOP
				    
 004B				QUIT:
				    ; Output result
 004B  A1 0233 R		    MOV AX, sum
 004E  A3 0239 R		    MOV temp_sum, AX  ; Save sum to temp_sum for write function
 0051  E8 0092			    CALL write    ; Call write function to display result
				    
				    ; End program
 0054  B4 4C			    MOV AH, 4CH
 0056  CD 21			    INT 21H

				; ===== Helper print function =====
 0058				_print PROC NEAR
 0058  BE 0000			    MOV SI, 0
 005B  BF 0000 R		    MOV DI, OFFSET _buff_p
				    
 005E				    _p_lp_1:
 005E  8A 00			    MOV AL, DS:[BX+SI]
 0060  3C 00			    CMP AL, 0
 0062  74 06			    JE _p_brk_1
 0064  88 05			    MOV DS:[DI], AL
 0066  46			    INC SI
 0067  47			    INC DI
 0068  EB F4			    JMP SHORT _p_lp_1
				    
 006A				    _p_brk_1:
 006A  BA 0000 R		    MOV DX, OFFSET _buff_p
 006D  B4 09			    MOV AH, 09h
 006F  CD 21			    INT 21h
 0071  8B CE			    MOV CX, SI
 0073  BF 0000 R		    MOV DI, OFFSET _buff_p
				    
 0076				    _p_lp_2:
 0076  B0 24			    MOV AL, 24h
 0078  88 05			    MOV DS:[DI], AL
 007A  47			    INC DI
 007B  E2 F9			    LOOP _p_lp_2
 007D  C3			    RET
 007E				_print ENDP

				; ===== Input function =====
 007E				read PROC NEAR
 007E  55			    PUSH BP
 007F  8B EC			    MOV BP, SP
 0081  BB 0209 R		    MOV BX, OFFSET _msg_s
 0084  E8 FFD1			    CALL _print
 0087  53			    PUSH BX
 0088  51			    PUSH CX
 0089  52			    PUSH DX
				    
 008A				    proc_pre_start:
 008A  33 C0			    XOR AX, AX
 008C  33 DB			    XOR BX, BX
 008E  33 C9			    XOR CX, CX
 0090  33 D2			    XOR DX, DX
				    
 0092				    proc_judge_sign:
 0092  B4 01			    MOV AH, 1
 0094  CD 21			    INT 21h
 0096  3C 2D			    CMP AL, '-'
 0098  75 05			    JNE proc_next
 009A  BA FFFF			    MOV DX, 0ffffh
 009D  EB 19			    JMP proc_digit_in
				    
 009F				    proc_next:
 009F  3C 30			    CMP AL, 30h
 00A1  72 2A			    JB proc_unexpected
 00A3  3C 39			    CMP AL, 39h
 00A5  77 26			    JA proc_unexpected
 00A7  2C 30			    SUB AL, 30h
 00A9  D1 E3			    SHL BX, 1
 00AB  8B CB			    MOV CX, BX
 00AD  D1 E3			    SHL BX, 1
 00AF  D1 E3			    SHL BX, 1
 00B1  03 D9			    ADD BX, CX
 00B3  02 D8			    ADD BL, AL
 00B5  80 D7 00			    ADC BH, 0
				    
 00B8				    proc_digit_in:
 00B8  B4 01			    MOV AH, 1
 00BA  CD 21			    INT 21h
 00BC  3C 0D			    CMP AL, 0dh
 00BE  74 02			    JE proc_save
 00C0  EB DD			    JMP proc_next
				    
 00C2				    proc_save:
 00C2  83 FA FF			    CMP DX, 0ffffh
 00C5  75 02			    JNE proc_result_save
 00C7  F7 DB			    NEG BX
				    
 00C9				    proc_result_save:
 00C9  8B C3			    MOV AX, BX
 00CB  EB 14			    JMP proc_input_done
				    
 00CD				    proc_unexpected:
 00CD  3C 0D			    CMP AL, 0dh
 00CF  74 F1			    JE proc_save
 00D1  BA 0211 R		    MOV DX, OFFSET next_row
 00D4  B4 09			    MOV AH, 9
 00D6  CD 21			    INT 21h
 00D8  BA 0214 R		    MOV DX, OFFSET error
 00DB  B4 09			    MOV AH, 9
 00DD  CD 21			    INT 21h
 00DF  EB A9			    JMP proc_pre_start
				    
 00E1				    proc_input_done:
 00E1  5A			    POP DX
 00E2  59			    POP CX
 00E3  5B			    POP BX
 00E4  5D			    POP BP
 00E5  C3			    RET
 00E6				read ENDP

				; ===== Output function =====
 00E6				write PROC NEAR
				    ; Use temp_sum variable instead of directly using AX
 00E6  BB 0200 R		    MOV BX, OFFSET _msg_p
 00E9  E8 FF6C			    CALL _print
				    
 00EC  A1 0239 R		    MOV AX, temp_sum  ; Load value from temp variable
 00EF  8B D8			    MOV BX, AX        ; Save to BX
				    
				    ; Check for negative number
 00F1  F7 C3 8000		    TEST BX, 8000h
 00F5  74 0A			    JZ skip_neg
 00F7  F7 DB			    NEG BX           ; If negative, get absolute value
 00F9  53			    PUSH BX          ; Save BX
 00FA  B2 2D			    MOV DL, '-'
 00FC  B4 02			    MOV AH, 2
 00FE  CD 21			    INT 21h          ; Output minus sign
 0100  5B			    POP BX           ; Restore BX
				    
 0101				skip_neg:
				    ; Convert number to ASCII and display
 0101  8B C3			    MOV AX, BX
 0103  33 C9			    XOR CX, CX        ; Clear counter
 0105  BB 000A			    MOV BX, 10        ; Divisor
				    
 0108				conv_loop:
 0108  33 D2			    XOR DX, DX
 010A  F7 F3			    DIV BX           ; AX / 10, quotient in AX, remainder in DX
 010C  52			    PUSH DX          ; Save remainder (lowest digit)
 010D  41			    INC CX           ; Increment counter
 010E  85 C0			    TEST AX, AX       ; Check if more digits
 0110  75 F6			    JNZ conv_loop    ; If not zero, continue loop
				    
 0112				print_digits:
 0112  5A			    POP DX           ; Get one digit
 0113  80 C2 30			    ADD DL, '0'       ; Convert to ASCII
 0116  B4 02			    MOV AH, 2
 0118  CD 21			    INT 21h          ; Display digit
 011A  E2 F6			    LOOP print_digits ; Continue until all digits displayed
				    
				    ; Output newline (CR+LF)
 011C  B2 0D			    MOV DL, 13        ; CR
 011E  B4 02			    MOV AH, 2
 0120  CD 21			    INT 21h
 0122  B2 0A			    MOV DL, 10        ; LF
 0124  B4 02			    MOV AH, 2
 0126  CD 21			    INT 21h
				    
 0128  C3			    RET
 0129				write ENDP

 0129				CODE ENDS
				END START
Microsoft (R) Macro Assembler Version 6.11		    05/25/25 22:11:36
2.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODE . . . . . . . . . . . . . .	16 Bit	 0129	  Para	  Private 
DATA . . . . . . . . . . . . . .	16 Bit	 0249	  Para	  Private 
EXTENDED . . . . . . . . . . . .	16 Bit	 0400	  Para	  Private 
STACK  . . . . . . . . . . . . .	16 Bit	 0400	  Para	  Private 


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

_print . . . . . . . . . . . . .	P Near	 0058	  CODE	Length= 0026 Public
  _p_lp_1  . . . . . . . . . . .	L Near	 005E	  CODE	
  _p_brk_1 . . . . . . . . . . .	L Near	 006A	  CODE	
  _p_lp_2  . . . . . . . . . . .	L Near	 0076	  CODE	
read . . . . . . . . . . . . . .	P Near	 007E	  CODE	Length= 0068 Public
  proc_pre_start . . . . . . . .	L Near	 008A	  CODE	
  proc_judge_sign  . . . . . . .	L Near	 0092	  CODE	
  proc_next  . . . . . . . . . .	L Near	 009F	  CODE	
  proc_digit_in  . . . . . . . .	L Near	 00B8	  CODE	
  proc_save  . . . . . . . . . .	L Near	 00C2	  CODE	
  proc_result_save . . . . . . .	L Near	 00C9	  CODE	
  proc_unexpected  . . . . . . .	L Near	 00CD	  CODE	
  proc_input_done  . . . . . . .	L Near	 00E1	  CODE	
write  . . . . . . . . . . . . .	P Near	 00E6	  CODE	Length= 0043 Public
  skip_neg . . . . . . . . . . .	L Near	 0101	  CODE	
  conv_loop  . . . . . . . . . .	L Near	 0108	  CODE	
  print_digits . . . . . . . . .	L Near	 0112	  CODE	


Symbols:

                N a m e                 Type     Value    Attr

FOR_LOOP . . . . . . . . . . . .	L Near	 0026	  CODE	
NEXT . . . . . . . . . . . . . .	L Near	 0045	  CODE	
N  . . . . . . . . . . . . . . .	Word	 0235	  DATA	
QUIT . . . . . . . . . . . . . .	L Near	 004B	  CODE	
START  . . . . . . . . . . . . .	L Near	 0000	  CODE	
T0 . . . . . . . . . . . . . . .	Word	 023B	  DATA	
T1 . . . . . . . . . . . . . . .	Word	 023D	  DATA	
T2 . . . . . . . . . . . . . . .	Word	 023F	  DATA	
T3 . . . . . . . . . . . . . . .	Word	 0241	  DATA	
T4 . . . . . . . . . . . . . . .	Word	 0243	  DATA	
T5 . . . . . . . . . . . . . . .	Word	 0245	  DATA	
T6 . . . . . . . . . . . . . . .	Word	 0247	  DATA	
_buff_p  . . . . . . . . . . . .	Byte	 0000	  DATA	
_buff_s  . . . . . . . . . . . .	Byte	 0100	  DATA	
_msg_p . . . . . . . . . . . . .	Byte	 0200	  DATA	
_msg_s . . . . . . . . . . . . .	Byte	 0209	  DATA	
error  . . . . . . . . . . . . .	Byte	 0214	  DATA	
i  . . . . . . . . . . . . . . .	Word	 0237	  DATA	
next_row . . . . . . . . . . . .	Byte	 0211	  DATA	
sum  . . . . . . . . . . . . . .	Word	 0233	  DATA	
temp_sum . . . . . . . . . . . .	Word	 0239	  DATA	

	   0 Warnings
	   0 Errors
